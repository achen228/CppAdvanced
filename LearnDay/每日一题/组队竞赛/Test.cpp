//解题思路
//1.本题的主要思路是贪心算法，贪心算法其实很简单，就是每次选值时都选当前能看到的局部最解忧，所
//以这里的贪心就是保证每组的第二个值取到能选择的最大值就可以，我们每次尽量取最大，但是最大的
//数不可能是中位数，所以退而求其次，取 每组中第二大的。
//2.排序，然后取下标为3n - 2，3n - 4 ，3n - 4...n + 2，n位置的元素累加即可，相当下标为[0, n - 1]的n个数
//做每组的最左边的数，剩下的2个数据两个为一组，大的值做最右边的数，次大的做中间值，这里就是
//把这个次大的值加起来。
//3.例如 现在排序后 有 1 2 5 5 8 9 ，那么取 8 和 5相加等于 13。

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

int main()
{
    // IO型OJ可能会有多组测试用例，所以这里要持续接收输入多组测试用例。
    int n;
    while (cin >> n)
    {
        long long sum = 0;
        vector<int> a;
        a.resize(3*n);
        
        for (int i = 0; i < (3 * n); i++)
        {
            cin >> a[i];
        }
        
        /*
        排序，然后取下标为3n - 2，3n - 4 ，3n - 4... n+2，n位置的元素累加即可，
        相当下标为[0,n-1]的n个数做每组的最左边的数，剩下的2个数据两个为一组，
        大的值做最右边的数，次大的做中间值，这里就是把这个次大的值加起来
        */        
        std::sort(a.begin(), a.end());
        for (int i = n; i <= 3 * n - 2; i += 2)
        {
            sum += a[i];
        }
        cout << sum << endl;
    }
}
